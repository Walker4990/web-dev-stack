데이터모델링 특징
-단순화 : 누구나 쉽게 이해할 수 있도록 표현한다.
-추상화 : 현실세계를 간단히 표현한다.
-명확화 : 명확하게 의미가 해석되어야 하고, 한가지의 의미를 가지고 있어야한다.

데이터 모델링 단계별 특징
개념 데이터 모델링 : 가장 높은 추상화레벨, 전사적인 모델링 수행시
논리 데이터 모델링 : 재사용성이 가장 높은 단계, 정규화, 데이터 표준화 시행
물리 데이터 모델링 : 가장 구체적인 모델링, 데이터 개체, 속성, 제약조건 등을 전반적으로 정의
                  성능, 보안성, 가용성을 고려하여 구축한다.

데이터 품질의 유의점
중복,
비유연성 : 업무가 바뀌었을때 기존 데이터 활용 불가
,비일관성 : 기존의 데이터들이 일관적이지 못한 데이터를 만들때

데이터 모델링의 필수요소
엔터티, 속성, 관계 (EAR)

엔터티 : 업무에서 저장되고 관리되어야하는 데이터들의 집합
 특징 
 1.식별여부 : 유일한 식별자를 핊수로한다.
 2. 최소 2개이상 인스턴스의 집합
 3. 반드시 여러가지의 속성을 가지고 있어야한다.
 4. 업무에 관련된 정보여야한다.
 5.  반드시 하나이상의 관계를 가진다.

 발생시점에 따른 분류
 기본엔터티 : 업무에 원래 존재하는 정보 (도서, 고객 등)
 중심엔터티 : 업무의 중심적인 역할 (주문, 환불 등)
 행위엔터티 : 두개 이상의 부모 엔터티로부터 발생, 데이터양이나 내용이 자주 바뀐다. (주문 내역, 환불 내역 등)

 형태에 따른 분류
 유형엔터티 : 형태가 있는 엔터티 (사원, 학생 등)
 개념엔터티 : 형태가 없는 엔터티 (부서, 학과 등)
 사건엔터티 : 업무의 수행에 따라 발생하는 엔터티 정보의 발생량 증가

속성
 업무상 분석해야하는 대상의 성질,특징이며 더 이상 분리되지 않는 최소의 데이터 단위(원자성)

 특성에 따른 분류
 기본속성 : 업무로부터 추출된 속성
 설계속성 : 업무를 규칙화하기 위해 새로 만들어진 속성 
 파생속성 : 다른 속성에 영향을 받아 생성된 속성, 계산된 값 등

식별자
 대표성 여부  : 주식별자 : 엔터티 내에서 인스턴스 구분 가능, 대표성 지님
             인조식별자 : 엔터티 내에서 인스턴스 구분 가능, 대표성 X

 스스로 생성 여부 : 내부 식별자 : 엔터티 내부에서 스스로 생성되는 식별자
                  외부 식별자 : 다른 엔터티에서 가져온 식별자
 속성의 수에 따른 분류 : 단일 식별자 : 하나의 속성으로 구성
                        복합 식별자 : 두개 이상의 속성으로 구성
 대체 여부에 따른 분류 : 본질 식별자 : 업무에 의해서 만들어지는 구성
                        인조식별자 : 업무에 의해서 만들어지지는 않지만, 
                        식별자가 너무 복잡한 구성을 가지고 있을 때 인위적으로 만들어냄

관계구성요소
 관계명
 관계차수 : 1:1 / 1:M / M:N
 선택사양

관계명 기술 규칙
 애매한 동사를 피하고, 현재형으로 표현

관계 정의시 점검할 사항
 관계 연결에 대한 규칙 서술 여부
 관계 연결이 동사로 이루어져 있는지
 두개의 엔터티 사이에 연관규칙이 존재하는지
 엔터티 사이에 정보의 조합이 발생하는지

식별자 관계(강한 관계 - SQL구문 복잡해짐, 실선)
 : 부모엔터티의 주식별자가 자식엔터티의 주식별자로 상속된 경우 
비식별자 관계 (약한 관계 - 불필요한 조인 유발, 점선)
 : 부모엔터티의 주식별자가 자식 엔터티의 일반속성으로 상속된 경우

ERD표기법
 I/E 표기법
 네모난 상자 , 엔터티 박스 바깥 표기, 주식별자와 일반속성 다른 칸으로 구분 , 관계선택사양 표기법 끝점에 동그라미 표현(선택사항) 반드시 포함되면 ㅡ 아니면 으 ㅇㅋ?
 관계명은 둘다 시작점은 beginning, 
Barker 표기법
 둥근 사각형 , 엔터티 박스 내부 표기, *(notnull)이나 점으로 표시 식별자는 #으로 표기
 관계선택사양표기법 : 시작점에 선택사항 표기,

3단계 스키막 구조
 외부스키마 사용자 뷰관점
 개념스키마 DB 관리자 관점
 내부스키마 DB 설계자 관점

데이터 독립성의 종류
 논리적 독립성
 : 개념 스키마 변경 되어도 외부 스키마에 영향 X
 물리적 독립성
 : 내부스키마가 변경되어도 외부/개념 스키마에 영향 X

정규화
 제 1정규화 : 테이블 속성의 원자성을 확보하고 주식별자를 설정
 제 2정규화 : 부분 함수적 종속 제거 : 두개 이상의 속성이 식별자로서 기능을하고 어느 하나의 식별자가 다른 일반속성과 연결되었을때 제거하는것
 제 3정규화 : X->Y, Y->Z로 분리


concat oracle || sql server +

distinct -> 중복값 제거 : 2개 이상 컬럼시 두개 모두 중복이어야 삭제

ALIAS는 column header 변경기능

where절 필터연산, <>, !=, ^=

100 between A and B => 100이 A <=100, B >= 100

like 연산자 4~5문제
% 0개 이상의 글자 (몇글자일지 모름)
_ 글자 하나 의미

excape 연산자 

ENAME LIKE 'A_#%' ESCAPE '#'
: #기호 뒤의 %는 와일드 카드가 아니라 특수문자다.

top n 쿼리
 select < 컬럼명>
 From < 테이블명> + LIMIT 5 ->최신 오라클 업데이트 된것 TOP N쿼리와 같은 기능
 WHERE <ROWNUM 조건식> 

 WITH TIES : 동일한 데이터가 있을 경우 함께 출력된다. -> ORDER BY절 필수

 단일행함수 : 1개의 INPUT -> 1개의 OUTPUT

 FLLOR, CEIL(SQL SERVER : CEILING), ROUND TRUNC 중요

ROUND(133.8594,2) 133.86

CONCAT -> 2개의 인수만을 합칠수 있다. 3개 4개 불가능

SUBSTR : 문자열을 잘라주는 함수
SUBSTR(<문자열>, <숫자>) : 숫자 이후의 글자를 다 가져옴
SUBSTR(<문자열>, <숫자1>, <숫자2>) : <숫자1>번 째 글자부터 <숫자2> 만큼의 글자 추출
EX : (ABCDE,3) -> CDE // (ABCDE, 3, 1) : C 

SYSDATE : 

날짜 연산의 산술연산은 '일'을 더해주는것

형변환 함수
숫자,날짜 -> 문자 : TO_CHAR
문자 -> 숫자 : TO_NUMBER
문자->날짜 : TO_DATE

CASE WHEN 구문의 ELSE
: ELSE 생략시 NULL 출력

NULL 과 비교연산자 비교시 -> UNKOWN으로 출력 
NOT(FALSE) -> TRUE, NOT(UNKOWN) -> UNKOWN
NOT (NULL=1 OR NULL<2) -> UNKOWN 출력 : 

NVL문제도 3문제 정도 출제

NULL - > ORACLE 무한대의 의미 SQL SERVER : 최소의 의미

ORDER BY 
SQL 연산순서 : FROM WHERE GROUP BY HAVING SELECT ORDER BY
: 왜 이렇게 설계 되었는가?

FROM절에서 데이터를 가져오고,
WHERE절에서 일부 데이터를 제거하고,
GROUP BY와 HAVING을 통해서 특정 조건을 만족시키고,
SELECT에서 출력을 한 데이터를 ORDER BY 절을 수행한다.

모든 데이터 타입 정렬 가능, 성능저하의 요인임.
ASC : 오름차순 DEFAULT / DESC : 내림차순
SELECT EMPNO, ENAME, SAL FROM EMP
ORDER BY 3 ASC; --> 3 = SAL을 가르킴
4라고 나오면 에러 발생함.

출력되지 않는 컬럼도 정렬이 가능
복수 컬럼 정렬도 가능
SAL DESC, ENAME ASC; -> SAL 내림 차순 정렬하고, ENAME 오름차순 정렬을 수행한다.

집계함수 :
SUM
AVG
COUNT COUNT(*) - > NULL을 포함하여 연산한다.(행의 수 세기 때문에)
MAX
MIN

집계함수 FROM, WHERE 사용불가

GROUP BY : 개체수준의 속성들이 그룹수준의 속성으로 변함.
개체 : EMPNO, DEPTNO ...
그룹 : COUNT(), SUM() ...

GROUP BY NULL -> 전체 행들을 하나의 그룹으로 보겠다.

그룹함수 
ROLLUP(A,B) =  GROUPING SETS(A,B) + GROUPING SETS(A) + GROUPING SETS(NULL)
                ->GROUP BY A,B         ->GROUP BY A         GROUP BY NULL
인수 자리 변경 불가

CUBE(A,B) = GROUP BY A,B + GROUP BY A + GROUP BY B + GROUP BY NULL
인수 자리 변경 가능

윈도우함수
RANK : 동순 인정, 중복시 건너뜀1,2,2,4...
DENSE_RANK : 동순 인정, 중복시 다음순서 출력 1,2,2,3...
ROW_NUMBER : 동순 인정 X 1,2,3,4...

ROWS / RANGES
- UNBOUNDED PRECEDING
-PRECEDING 이전의 행
-CURRENT ROW 현재 행
-FOLLOWING 이후의 행
-UNBOUNDED FOLLOWING

RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW : DEFAULT

FIRST_VALUE : 첫 번째 값 / LAST_VALUE : 가장 나중에 나오는 값

LAG(값 , 숫자1, 숫자2) : 현재 행 이전 데이터 가져옴 
:숫자1 이전의 행 출력, 숫자 1없으면 숫자 2 출력  
 LEAD : 현재 행 이후 데이터를 가져옴
:숫자1 이후의 행 출력, 숫자 1없으면 숫자 2 출력

비율관련 함수 다시보기

조인
- INNER JOIN 
FROM A,B
WHERE B.DEPTNO = A.DEPTNO

FROM A (INNER) JOIN B
ON B.DEPTNO = A.DEPTNO

- NATURAL JOIN
USING, ON, WHERE 절 서술X
공통 컬럼 한번 출력

OUTER JOIN
테이블을 갈리게 만들어서 한번 보자
EX
1
2       2
3       3
        4

(+)의 반대편에 있는 외부조인이다.
EX
WHERE A = B (+) -> LEFT OUTER JOIN
      B (+)=A -> RIGHT OUTER JOIN

SELF JOIN

부모 -> 자식 방향 : 순방향 전개

SELECT A.EMPNO, A.ENAME, B.EMPNO, B.ENAME
FROM EMP A, EMP B
WHERE A.EMPNO=B.MGR
-> A의 직원 번호는 B의 상사번호다 : A= 상사/ B=직원


SELECT A.EMPNO, A.ENAME, B.EMPNO, B.ENAME
FROM EMP A, EMP B
WHERE A.MGR=B.EMPNO
A의 상사번호가 B의 직원번호다. : A=직원 /  B=상사

계층형 질의

