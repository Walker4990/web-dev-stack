-- 1. 직급이 대리이면서 ASIA 지역에서 근무하는 직원들의 사번, 직원명, 직급명, 부서명, 근무지역, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_CODE, SALARY FROM EMPLOYEE;
SELECT DEPT_ID, DEPT_TITLE, LOACTION_ID FROM DEPARTMENT;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT LOCAL_CODE, NATIONAL_CODE, LOCAL_NAME FROM LOCATION;

SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY 
FROM EMPLOYEE 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN JOB USING (JOB_CODE)
    JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE JOB_NAME = '대리'
AND LOCAL_NAME LIKE'ASIA%';

-- 2. 70년대생 이면서 여자이고, 성이 전씨인 직원들의 직원명, 주민번호, 부서명, 직급명 조회
SELECT * FROM EMPLOYEE;
-- SUBSTR(EMP_NO, 1, 1) = 7,
-- SUBSTR(EMP_NO, 8, 1) = 2,
-- SUBSTR(EMP_NAME, 1, 1) = '전'
 SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_CODE FROM EMPLOYEE;
    SELECT DEPT_ID, DEPT_TITLE FROM DEPARTMENT;
    SELECT JOB_CODE, JOB_NAME FROM JOB;

SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN JOB USING (JOB_CODE)
WHERE 
    SUBSTR(EMP_NO, 1, 1) = 7
AND SUBSTR(EMP_NO, 8, 1) = 2
-- EMP_NO LIKE '7_____-2%'
AND SUBSTR(EMP_NAME, 1, 1) = '전';
--  EMP_NAME LIKE '전%';

-- 3. 보너스를 받는 직원들의 직원명, 보너스, 연봉, 부서명, 근무지역 조회 (단, 부서 배치 안된 사원들도 출력)
SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_CODE FROM EMPLOYEE;
SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID  FROM DEPARTMENT;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT LOCAL_CODE, LOCAL_NAME FROM LOCATION;

SELECT EMP_NAME, BONUS, SALARY*12 연봉, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE BONUS IS NOT NULL;

-- 4. 각 부서별 평균 급여를 조회하여 부서명, 평균 급여 조회 (단, 부서 배치 안된 사원들의 평균도 같이)
SELECT FLOOR(AVG(SALARY)), DEPT_CODE FROM EMPLOYEE GROUP BY DEPT_CODE;
SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID  FROM DEPARTMENT;

SELECT NVL(DEPT_TITLE, '부서없음') 부서, TO_CHAR(FLOOR(AVG(SALARY)), '999,999,999') AS "평균 급여"
FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;

-- 5. 각 부서별 총 급여의 합이 1000만원 이상인 부서명, 급여의 합 조회
SELECT DEPT_TITLE, TO_CHAR(SUM(SALARY),'999,999,999') 
FROM EMPLOYEE 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > 10000000;


-- 6. 사번, 직원명, 직급명, 급여 등급, 구분 조회
-- 이때 구분은 급여 등급이 S1, S2인 경우 '고급', S3, S4인 경우 '중급', S5, S6인 경우 '초급'
SELECT * FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;
SELECT SAL_LEVEL, MIN_SAL, MAX_SAL FROM SAL_GRADE;

SELECT EMP_ID, EMP_NAME, JOB_NAME, SAL_LEVEL, 
CASE
    WHEN SAL_LEVEL IN ('S1', 'S2') THEN '고급'
    WHEN SAL_LEVEL IN ('S3', 'S4') THEN '중급'
    WHEN SAL_LEVEL IN ('S5', 'S6') THEN '초급'
    END "구분"
FROM EMPLOYEE 
    JOIN JOB USING (JOB_CODE)
    JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);


-- 7. 보너스를 받지 않는 직원들 중 직급 코드가 J4 또는 J7인 직원들의 직원명, 직급명, 급여 조회
SELECT * FROM EMPLOYEE;
SELECT JOB_CODE, JOB_NAME FROM JOB;

SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE)
WHERE BONUS IS NULL
AND JOB_CODE IN ('J4', 'J7');

-- 8. 부서가 있는 직원들의 직원명, 직급명, 부서명, 근무 지역 조회
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;

SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN JOB USING (JOB_CODE)
    JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE DEPT_CODE IS NOT NULL;

-- 9. 해외영업팀에 근무하는 직원들의 직원명, 직급명, 부서코드, 부서명 조회
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE LIKE '해외영업%';


-- 10. 이름에 '형'자가 들어있는 직원들의 사번, 직원명, 직급명 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';
-- 키워드 검색

-- 테이블 : USER_INFO, REVIEW, MOVIE, ACTOR, MOVIE_ACTOR

-- 11. 영화 제목, 감독, 출연한 배우 조회
SELECT TITLE, DIRECTOR, MOVIE_ID FROM MOVIE;
SELECT ACTOR_ID, NAME FROM ACTOR;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;

SELECT TITLE, DIRECTOR, NAME
FROM MOVIE 
    JOIN MOVIE_ACTOR USING (MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID);

-- 12. 평점이 3점 이상인 리뷰 영화 제목과 이름, 평점 조회
SELECT USER_ID, MOVIE_ID, RATING FROM REVIEW;
SELECT * FROM USER_INFO;
SELECT MOVIE_ID, TITLE FROM MOVIE;

SELECT TITLE, NAME, RATING
FROM MOVIE 
    JOIN REVIEW USING (MOVIE_ID)
    JOIN USER_INFO USING(USER_ID)
WHERE RATING >= 3;

-- 13. 사용자별 리뷰 수 조회
SELECT COUNT("COMMENT"), NAME
FROM REVIEW 
    JOIN USER_INFO USING(USER_ID)
GROUP BY NAME;

-- 14. 최동훈 감독의 영화에 출연한 배우 조회
SELECT MOVIE_ID, TITLE, DIRECTOR FROM MOVIE;
SELECT ACTOR_ID, NAME FROM ACTOR;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;

SELECT DISTINCT NAME
FROM MOVIE
    JOIN MOVIE_ACTOR USING (MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
WHERE DIRECTOR = '최동훈';

-- 15. 하정우가 출연한 영화 제목과 평균 평점 조회
SELECT MOVIE_ID, RATING FROM REVIEW;
SELECT MOVIE_ID, TITLE FROM MOVIE;
SELECT MOVIE_ID, ACTOR_ID FROM MOVIE_ACTOR;
SELECT NAME, ACTOR_ID FROM ACTOR;

SELECT TITLE, AVG(RATING)
FROM MOVIE
    JOIN MOVIE_ACTOR USING (MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
    JOIN REVIEW USING (MOVIE_ID)
WHERE NAME = '하정우'
GROUP BY TITLE;

-- 16. MBTI별 평균 평점 조회
SELECT USER_ID, MBTI FROM USER_INFO;
SELECT USER_ID, RATING FROM REVIEW;

SELECT MBTI, FLOOR(AVG(RATING))
FROM USER_INFO
    JOIN REVIEW USING (USER_ID)
GROUP BY MBTI;

-- 17. 각 영화별 리뷰 수와 평균 평점 조회 (리뷰 수가 1건이라도 있는 경우부터)
SELECT MOVIE_ID, TITLE FROM MOVIE;
SELECT MOVIE_ID, USER_ID, "COMMENT", RATING FROM REVIEW;

SELECT TITLE, COUNT("COMMENT") "리뷰 수", AVG(RATING) "평균 평점"
FROM MOVIE JOIN REVIEW USING (MOVIE_ID)
HAVING COUNT("COMMENT")>0
GROUP BY TITLE;

-- 18. 각 배우가 출연한 영화 수 조회 (단, 3편 이상인 배우만)
SELECT MOVIE_ID FROM MOVIE;
SELECT ACTOR_ID, MOVIE_ID FROM MOVIE_ACTOR;
SELECT ACTOR_ID, NAME FROM ACTOR;

SELECT NAME, COUNT(ACTOR_ID)
FROM MOVIE
    JOIN MOVIE_ACTOR USING (MOVIE_ID)
    JOIN ACTOR USING (ACTOR_ID)
HAVING COUNT(ACTOR_ID) > 3
GROUP BY NAME;

SELECT * FROM USER_INFO;
SELECT * FROM REVIEW;
SELECT * FROM MOVIE;
SELECT * FROM ACTOR;
SELECT * FROM MOVIE_ACTOR;

